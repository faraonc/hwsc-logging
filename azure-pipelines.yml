trigger:
  - master

pr:
  - master

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  - name: GOBIN
    value: '$(GOPATH)/bin' # Go binaries path
  - name: GOROOT
    value: '/usr/local/go1.11' # Go installation path
  - name: GOPATH
    value: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  - name: modulePath
    value: '$(GOPATH)/$(build.repository.name)'
  - group: hwsc-dev-container-vars

steps:
  - script: printenv

  - task: CmdLine@2
    inputs:
      script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      failOnStandardError: 'true'
      displayName: 'Set Up the Go Workspace'

  - task: CmdLine@2
      inputs:
        script: |
          go get -v -t -d ./...
        workingDirectory: '$(modulePath)'
        failOnStandardError: 'true'
        displayName: 'Go Get Dependencies'

  - task: CmdLine@2
      inputs:
        script: |
          go test -v -cover -failfast -race ./...
          go get github.com/jstemmer/go-junit-report
          go get github.com/axw/gocov/gocov
          go get github.com/AlekSi/gocov-xml
          go test -coverprofile=coverage.out -v -race -covermode atomic ./... 2>&1 | go-junit-report > report.xml
          gocov convert coverage.out | gocov-xml > coverage.xml
          mkdir -p coverage/official-tool
          go tool cover -html=coverage.out -o coverage/official-tool/coverage.html
          go get -u github.com/matm/gocov-html
          gocov convert coverage.out > coverage.json
          gocov-html < coverage.json > coverage/index.html
        workingDirectory: '$(modulePath)'
        failOnStandardError: 'true'
        displayName: 'Run Unit Test'

  - task: PublishTestResults@2
    inputs:
      testRunner: JUnit
      testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
      failTaskOnFailedTests: 'true'
      failOnStandardError: 'true'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
      reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage
      failIfCoverageEmpty: 'true'
      failOnStandardError: 'true'

  - script: go build -v ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Build Test'
